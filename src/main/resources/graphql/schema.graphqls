scalar DateTime

enum Platform {
    PC,
    Switch,
    PS5,
    PS4,
    Xbox
}

enum Status {
    TODO,
    InProgress,
    Failed,
    Completed
}

type Game {
    gameId: ID!
    name: String!
    platforms: [Platform!]!
}

type ChallengeRun {
    runId: ID!
    gameId: ID!
    runName: String!
    description: String!
    created: DateTime
}

type ChallengeRunAttempt {
    attemptId: ID!
    runId: ID!
    status: Status
    attemptBy: User
    started: DateTime
    finished: DateTime
}

type User {
    userId: ID!
    username: String!
    friendIds: [String!]!
    runs: [ChallengeRunAttempt]
}

input NewAttemptInput {
    runId: ID!
    attemptByUserId: ID!
    immediate: Boolean
}

type Query {
    getAllUsers: [User!]!
    getUserById(userId: ID!): User
    getAllGames: [Game!]!
    getGameById(gameId: ID!): Game
    getGameByName(name: String!): Game
    getAllChallengeRuns: [ChallengeRun!]!
    getChallengeRunsByGameId(gameId: ID!): [ChallengeRun]!
    getChallengeRunsByRunId(runId: ID!): ChallengeRun!
    getChallengeRunsByName(runName: String!): ChallengeRun!
    findAllChallengeRunAttempts: ChallengeRunAttempt
    findAllChangeRunAttemptsByUserId(userId: ID!): ChallengeRunAttempt
    findAllAttemptsByRunId(runId: ID!): ChallengeRunAttempt

}

type Mutation {
    createGame(name: String!, platforms: [Platform]): Game
    addPlatformToGame(gameId: ID!, platform: Platform!): Game
    createUser(username: String!): User
    addFriend(userId: ID!, friendUserId: ID!): User
    removeFriend(userId: ID!, friendUserId: ID!): User
    createChallengeRun(gameId: ID!, runName: String!, description: String!): ChallengeRun
    createChallengeRunAttempt(input: NewAttemptInput): ChallengeRunAttempt
    changeChallengeRunAttemptStatus(attemptId: ID!, newStatus: Status): ChallengeRunAttempt

}